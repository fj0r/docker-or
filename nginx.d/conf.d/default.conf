server {
    set $root       '/srv';
    listen          80;
#   listen          443 ssl;
    server_name     _;
    charset         utf-8;

    #include       auto-ssl.location;

    root            $root;
    #access_log     /var/log/nginx/host.access.log  main;

    location / {
        autoindex on;
        autoindex_localtime on;
        autoindex_exact_size off;
    }

    location ~ \/\+$ {
        autoindex on;
        autoindex_format json;
        rewrite ^/(.*)\+$ /$1 break;
    }

    location = /favicon.ico {
        log_not_found off;
        access_log off;
    }

    location = /robots.txt {
        allow all;
        log_not_found off;
        access_log off;
    }

    location = /info.json {
        default_type 'application/json';
        content_by_lua_block {
            local cjson = require "cjson"
            local res = {
                hostname = os.getenv("HOSTNAME"),
                timezone = os.getenv("TIMEZONE"),
                version = 1
            }
            ngx.say(cjson.encode(res))
            ngx.exit(200)
        }
    }

    location = /ip {
        default_type 'text';
        content_by_lua_block {
            ngx.print(ngx.var.remote_addr)
            ngx.exit(200)
        }
    }

    location = /ua {
        default_type 'text';
        content_by_lua_block {
            ngx.print(ngx.req.get_headers()['user-agent'])
            ngx.exit(200)
        }
    }

    location = /redirect {
        default_type 'text';
        content_by_lua_block {
            -- ngx.header.content_type = 'text'
            ngx.redirect(ngx.req.get_uri_args()['url'], 302)
        }
    }

    location = /headers {
        default_type 'text';
        content_by_lua_block {
            ngx.say(ngx.req.raw_header())
            ngx.exit(200)
        }
    }

    location = /body {
        lua_need_request_body on;
        content_by_lua_block {
            ngx.print(ngx.req.get_body_data())
            ngx.exit(200)
        }
    }

    location ~ /run/(.*) {
        # auth_basic  "yii runner";
        ## htpasswd pwdfile user
        # auth_basic_user_file htpasswd;
        default_type 'text';
        content_by_lua_block {
            local shell = require "resty.shell"
            local cmd = {
                ps = 'ps',
                top = 'top',
                ls = 'ls',
            }
            local ok, stdout, stderr, reason, status = shell.run(cmd[ngx.var[1]], nil, 3000, 409600)
            ngx.say(stdout)
            ngx.say(stderr)
            ngx.exit(200)
        }
    }


    #error_page     404              /404.html;

    # redirect server error pages to the static page /50x.html
    #
    error_page      500 502 503 504  /50x.html;
    location = /50x.html {
        root   /usr/share/nginx/html;
    }

    # deny access to .htaccess files, if Apache's document root
    # concurs with nginx's one
    #
    #location ~ /\.ht {
    #    deny  all;
    #}

    location = /tunnel {
        include     http_params;
        include     websocket_params;
        proxy_pass  http://127.0.0.1:8001;
    }

    location /in/ {
        include     http_params;
        proxy_pass http://127.0.0.1:8000/;
    }

    location = /~!frp {
        include     http_params;
        include     websocket_params;
        proxy_pass          http://127.0.0.1:7000;
    }

    location ~* /([0-9]+)/(.*) {
        include     http_params;
        proxy_pass http://127.0.0.1:$1/$2;
    }


    location = /websocat {
        include     http_params;
        include     websocket_params;
        proxy_pass  http://127.0.0.1:9999;
    }
}

