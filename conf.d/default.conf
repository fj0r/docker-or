server {
    set $root       '/srv';
    listen          80;
#   listen          443 ssl;
    server_name     _;
    charset         utf-8;

#   # Dynamic handler for issuing or returning certs for SNI domains.
#   ssl_certificate_by_lua_block {
#     auto_ssl:ssl_certificate()
#   }

#   # You must still define a static ssl_certificate file for nginx to start.
#   #
#   # You may generate a self-signed fallback with:
#   #
#   # openssl req -new -newkey rsa:2048 -days 3650 -nodes -x509 \
#   #   -subj '/CN=sni-support-required-for-valid-ssl' \
#   #   -keyout /etc/ssl/resty-auto-ssl-fallback.key \
#   #   -out /etc/ssl/resty-auto-ssl-fallback.crt
#   ssl_certificate /etc/ssl/resty-auto-ssl-fallback.crt;
#   ssl_certificate_key /etc/ssl/resty-auto-ssl-fallback.key;

#   # Endpoint used for performing domain verification with Let's Encrypt.
#   location /.well-known/acme-challenge/ {
#     content_by_lua_block {
#       auto_ssl:challenge_server()
#     }
#   }

    root            $root;
    #access_log     /var/log/nginx/host.access.log  main;

    location / {
        autoindex on;
        autoindex_localtime on;
        autoindex_exact_size off;
    }

    location ~ \/\+$ {
        autoindex on;
        autoindex_format json;
        rewrite ^/(.*)\+$ /$1 break;
    }

    location = /favicon.ico {
        log_not_found off;
        access_log off;
    }

    location = /robots.txt {
        allow all;
        log_not_found off;
        access_log off;
    }

    location = /info.json {
        content_by_lua_block{
            local cjson = require "cjson"
            local res = {
                hostname = os.getenv("HOSTNAME"),
                timezone = os.getenv("TIMEZONE"),
                version = 1
            }
            ngx.header.content_type = 'application/json'
            ngx.say(cjson.encode(res))
            ngx.exit(200)
        }
    }

    #error_page     404              /404.html;

    # redirect server error pages to the static page /50x.html
    #
    error_page      500 502 503 504  /50x.html;
    location = /50x.html {
        root   /usr/share/nginx/html;
    }

    # deny access to .htaccess files, if Apache's document root
    # concurs with nginx's one
    #
    #location ~ /\.ht {
    #    deny  all;
    #}

    location = /websocat {
	    proxy_read_timeout  1800s;
	    proxy_pass          http://127.0.0.1:9999;
	    proxy_http_version  1.1;
	    proxy_set_header    Upgrade           $http_upgrade;
	    proxy_set_header    Connection        "upgrade";
	    proxy_set_header    Host              $host;
	    proxy_set_header    X-Real-IP         $remote_addr;
	    proxy_set_header    X-Forwarded-For   $proxy_add_x_forwarded_for;
	    proxy_set_header    X-Forwarded-Proto $scheme;
    }
}


# # Internal server running on port 8999 for handling certificate tasks.
# server {
#   listen 127.0.0.1:8999;

#   # Increase the body buffer size, to ensure the internal POSTs can always
#   # parse the full POST contents into memory.
#   client_body_buffer_size 128k;
#   client_max_body_size 128k;

#   location / {
#     content_by_lua_block {
#       auto_ssl:hook_server()
#     }
#   }
# }
